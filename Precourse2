# Iterative Binary Search Function
#Time Complexity: O(log n)
#Space Complexity: O(1)

def binary_search(arr, x):
    low = 0
    high = len(arr) - 1
    mid = 0
 
    while low <= high:
         mid = (high + low) // 2
         if arr[mid] < x:
            low = mid + 1
        elif arr[mid] > x:
            high = mid - 1
        else:
            return mid
    return -1



#QUICKSORT
Time Complexity: O(N log N)
Space Complexity: O(1)
def partition(array, low, high):
 
    pivot = array[high]
    i = low - 1
    for j in range(low, high):
        if array[j] <= pivot:
            i = i + 1
            (array[i], array[j]) = (array[j], array[i])
    (array[i + 1], array[high]) = (array[high], array[i + 1])
 
    return i + 1 
def quickSort(array, low, high):
    if low < high:
        pi = partition(array, low, high)
        quickSort(array, low, pi - 1)
        quickSort(array, pi + 1, high)
size = len(data)
quickSort(data, 0, size - 1)


#Find Mid Point of a Singly Linked List.
#Time Complexity: O(n) where n is no of nodes in linked list
#Space Complexity: O(1)
class NodeOperation:
     def pushNode(self, head_ref, data_val):
         new_node = Node(data_val)
         new_node.next = head_ref
         head_ref = new_node
         return head_ref
    def printNode(self, head):
        while (head != None):
            head = head.next 
    def getLen(self, head):
        temp = head
        len = 0
 
        while (temp != None):
            len += 1
            temp = temp.next
 
        return len
 
    def printMiddle(self, head):
        if head != None:
            # find length
            len = self.getLen(head)
            temp = head
 
            # traverse till we reached half of length
            midIdx = len // 2
            while midIdx != 0:
                temp = temp.next
                midIdx -= 1

#MergeSort

#Time Complexity: O(n*log(n))

#Space Complexity: O(n)

def merge(arr, l, m, r):
	n1 = m - l + 1
	n2 = r - m
 
	L = [0] * (n1)
	R = [0] * (n2)
 
	
	for i in range(0, n1):
		L[i] = arr[l + i]
 
	for j in range(0, n2):
		R[j] = arr[m + 1 + j]
 
	i = 0	 	
          j = 0	
	k = l	
	while i < n1 and j < n2:
		if L[i] <= R[j]:
			arr[k] = L[i]
			i += 1
		else:
			arr[k] = R[j]
			j += 1
		k += 1
 
	while i < n1:
		arr[k] = L[i]
		i += 1
		k += 1
 
	while j < n2:
		arr[k] = R[j]
		j += 1
		k += 1
 
def mergeSort(arr, l, r):
	if l < r:
		m = l+(r-l)//2
		mergeSort(arr, l, m)
		mergeSort(arr, m+1, r)
		merge(arr, l, m, r)



Iterative Quicksort
#Time Complexity: O(n*log(n))
#SpaceComplexity: O(n)
def partition(arr,l,h):
    i = ( l - 1 )
    x = arr[h]
 
    for j in range(l , h):
        if   arr[j] <= x:
            i = i+1
            arr[i],arr[j] = arr[j],arr[i]
 
    arr[i+1],arr[h] = arr[h],arr[i+1]
    return (i+1)
 

def quickSortIterative(arr,l,h):
 
    
    size = h - l + 1
    stack = [0] * (size)
 
    
    top = -1
 
    
    top = top + 1
    stack[top] = l
    top = top + 1
    stack[top] = h
 
    
    while top >= 0:
        h = stack[top]
        top = top - 1
        l = stack[top]
        top = top - 1
        p = partition( arr, l, h )
        if p-1 > l:
            top = top + 1
            stack[top] = l
            top = top + 1
            stack[top] = p - 1
        if p+1 < h:
            top = top + 1
            stack[top] = p + 1
            top = top + 1
            stack[top] = h
